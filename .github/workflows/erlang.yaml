name: erlang

on: [push, pull_request]

jobs:
  docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        otp: ['DIR=master', 'DIR=master VARIANT=alpine',
              'DIR=24', 'DIR=24 VARIANT=slim', 'DIR=24 VARIANT=alpine',
              'DIR=23',' DIR=23 VARIANT=slim', 'DIR=23 VARIANT=alpine',
              'DIR=22', 'DIR=22 VARIANT=slim', 'DIR=22 VARIANT=alpine',
              'DIR=21', 'DIR=21 VARIANT=slim', 'DIR=21 VARIANT=alpine',
              'DIR=20', 'DIR=20 VARIANT=slim', 'DIR=20 VARIANT=alpine',
              'DIR=19', 'DIR=19 VARIANT=slim']
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: |
           ${{ matrix.otp }}
           git clone https://github.com/docker-library/official-images.git ~/official-images
           cd "$DIR"
           eval $(awk '/OTP_VERSION=/ { sub(/@/, "-", $2); print $2; exit }' ${VARIANT:-.}/Dockerfile)
           image="erlang:${OTP_VERSION}${VARIANT:+-$VARIANT}"
           docker build --pull -t "$image" "${VARIANT:-.}"
           ~/official-images/test/run.sh "$image"
           docker images
  docker-win:
    strategy:
      matrix:
        os:
          - windows-latest
        from-image-name:
          - windows
          - windows/servercore
        from-image-tag:
          - "10.0.17763.2114"
        otp:
          - version: "24.2"
            hash: "C22052C4920F06A9044F514A427B1C4116DA6DB6D6D6070EEDEB2955F1F6869B"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build
        run: |
          # Windows docker builds must take into account two extra things:
          #   * The base image OS version _must_ be the same as the host OS.  Therefore it's
          #     important to include the OS version in the docker tag.
          #   * Nanoserver variants omit huge amounts, so a separate build stage is required.
          $from_image_name = "${{ matrix.from-image-name }}"
          $from_image_tag = "${{ matrix.from-image-tag }}"
          $from_image = "mcr.microsoft.com/${from_image_name}:${from_image_tag}"
          $build_image = "mcr.microsoft.com/${from_image_name}:${from_image_tag}"

          $windows_tag = ($from_image_name.Split("/") + $from_image_tag) -join "-"
          $otp_tag = @($otp_version, $windows_tag) -join "-"
          $image = "erlang:${otp_tag}"

          docker build `
            --build-arg "OTP_VERSION=$otp_version" `
            --build-arg "OTP_HASH=$otp_hash" `
            --build-arg "FROM_IMAGE=$from_image" `
            --build-arg "BUILD_IMAGE=$build_image" `
            -t $image `
            .

          # It looks like the official images repo does contain some level of support for testing
          # windows images but I'm not certain how this should be implemented.

          docker images
